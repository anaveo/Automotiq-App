import 'package:automotiq_app/services/bluetooth_manager.dart';
import 'package:flutter/material.dart';
import 'package:flutter_reactive_ble/flutter_reactive_ble.dart';
import 'package:provider/provider.dart';
import '../models/vehicle_model.dart';
import '../providers/vehicle_provider.dart';
import '../utils/logger.dart';

class BlePairingScreen extends StatefulWidget {
  final DiscoveredDevice device;

  const BlePairingScreen({super.key, required this.device});

  @override
  State<BlePairingScreen> createState() => _BlePairingScreenState();
}

class _BlePairingScreenState extends State<BlePairingScreen> {
  bool _isPairing = false;
  String? _errorMessage;
  String _pairingStatus = 'Connecting to device...';

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) => _startPairing());
  }

  Future<void> _startPairing() async {
    final bluetoothManager = Provider.of<BluetoothManager?>(
      context,
      listen: false,
    );
    final vehicleProvider = Provider.of<VehicleProvider>(
      context,
      listen: false,
    );

    if (bluetoothManager == null) {
      setState(() {
        _errorMessage = 'Bluetooth service unavailable';
      });
      return;
    }

    setState(() {
      _isPairing = true;
      _errorMessage = null;
      _pairingStatus = 'Connecting to device...';
    });

    try {
      AppLogger.logInfo(
        'Pairing device: ${widget.device.name} (ID: ${widget.device.id})',
      );
      await bluetoothManager.connectToDevice(widget.device.id);

      setState(() {
        _pairingStatus = 'Getting vehicle details...';
      });

      // TODO: Replace with actual vehicle values
      final vehicle = VehicleModel(
        id: '', // ID is generated by the provider
        deviceId: widget.device.id,
        name: widget.device.name.isNotEmpty
            ? widget.device.name
            : 'Vehicle ${DateTime.now().millisecond}',
        vin: 'ABCDEF', // Replace with actual VIN
        year: 2000 + (DateTime.now().hour % 25), // Temporary year calculation
        odometer:
            50000 +
            (DateTime.now().millisecond), // Replace with actual odometer
        diagnosticTroubleCodes: [],
      );

      setState(() {
        _pairingStatus = 'Saving vehicle data...';
      });

      await vehicleProvider.addVehicle(vehicle);
      AppLogger.logInfo('Vehicle added: ${vehicle.name} (ID: ${vehicle.id})');

      if (mounted) {
        Navigator.pushNamedAndRemoveUntil(context, '/', (route) => false);
      }
    } catch (e) {
      AppLogger.logError(e);
      setState(() {
        _errorMessage = 'Failed to pair or save vehicle: $e';
        _isPairing = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        shadowColor: Colors.transparent,
        elevation: 0,
        title: Text(
          'Pairing ${widget.device.name.isNotEmpty ? widget.device.name : 'Device'}',
        ),
      ),
      body: Center(
        child: _errorMessage != null
            ? Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    _errorMessage!,
                    style: Theme.of(context).textTheme.labelMedium,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: _startPairing,
                    style: Theme.of(context).elevatedButtonTheme.style,
                    child: const Text('Retry'),
                  ),
                ],
              )
            : _isPairing
            ? Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Image(
                    image: const AssetImage(
                      'assets/images/Automotiq_Loading_Gif.gif',
                    ),
                    width: MediaQuery.of(context).size.width,
                  ),
                  const SizedBox(height: 16),
                  Text(
                    _pairingStatus,
                    style: Theme.of(context).textTheme.bodyMedium,
                    textAlign: TextAlign.center,
                  ),
                ],
              )
            : const SizedBox(), // Empty state while transitioning
      ),
    );
  }
}
