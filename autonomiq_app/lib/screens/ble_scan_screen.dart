import 'package:autonomiq_app/services/bluetooth_manager.dart';
import 'package:flutter/material.dart';
import 'package:flutter_reactive_ble/flutter_reactive_ble.dart';
import 'package:provider/provider.dart';
import '../models/vehicle_model.dart';
import '../providers/vehicle_provider.dart';
import '../utils/navigation.dart';
import '../utils/logger.dart';

class BleScanScreen extends StatefulWidget {
  const BleScanScreen({super.key});

  @override
  State<BleScanScreen> createState() => _BleScanScreenState();
}

class _BleScanScreenState extends State<BleScanScreen> {
  List<DiscoveredDevice> _devices = [];
  bool _isScanning = false;
  bool _isPairing = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) => _startScan());
  }

  Future<void> _startScan() async {
    final bluetoothManager = Provider.of<BluetoothManager?>(context, listen: false);
    if (bluetoothManager == null) {
      setState(() {
        _errorMessage = 'Bluetooth service unavailable';
      });
      return;
    }

    setState(() {
      _isScanning = true;
      _errorMessage = null;
      _devices = [];
    });

    try {
      AppLogger.logInfo('Starting BLE scan', 'BleScanScreen.startScan');
      final devices = await bluetoothManager.scanForNewDevices(timeout: const Duration(seconds: 10));
      setState(() {
        final uniqueDevices = <String, DiscoveredDevice>{};
        for (final device in devices) {
          if (device.name.isNotEmpty) {
            uniqueDevices[device.id] = device;
          }
        }
        _devices = uniqueDevices.values.toList();
        _isScanning = false;
        AppLogger.logInfo('BLE scan completed, found ${_devices.length} devices', 'BleScanScreen.startScan');
      });
    } catch (e, stackTrace) {
      AppLogger.logError(e, stackTrace, 'BleScanScreen.startScan');
      setState(() {
        _errorMessage = 'Scan failed: $e';
        _isScanning = false;
      });
    }
  }

  Future<void> _pairAndSaveDevice(DiscoveredDevice device) async {
    final bluetoothManager = Provider.of<BluetoothManager?>(context, listen: false);
    final vehicleProvider = Provider.of<VehicleProvider>(context, listen: false);

    if (bluetoothManager == null) {
      setState(() {
        _errorMessage = 'Bluetooth service unavailable';
      });
      return;
    }

    setState(() {
      _isPairing = true;
      _errorMessage = null;
      _devices = []; // Hide device list during pairing
    });

    try {
      AppLogger.logInfo('Pairing device: ${device.name} (ID: ${device.id})', 'BleScanScreen.pairAndSaveDevice');
      await bluetoothManager.connectToDevice(device.id);

      // TODO: Replace with actual vehicle values
      final vehicle = VehicleModel(
        id: '', // id is generated by the repository, so we can use a placeholder here
        deviceId: device.id,
        name: 'Vehicle ${DateTime.now().millisecond}',
        vin: 'ABCDEF', // Replace with actual VIN
        year: 2000 + (DateTime.now().hour),
        odometer: 50000 + (DateTime.now().millisecond), // Replace with actual odometer reading
        diagnosticTroubleCodes: [],
      );

      await vehicleProvider.addVehicle(vehicle);
      AppLogger.logInfo('Vehicle added: ${vehicle.name} (ID: ${vehicle.id})', 'BleScanScreen.pairAndSaveDevice');

      navigateToHome(context);
    } catch (e, stackTrace) {
      AppLogger.logError(e, stackTrace, 'BleScanScreen.pairAndSaveDevice');
      setState(() {
        _errorMessage = 'Failed to pair or save vehicle: $e';
        _isPairing = false;
        _devices = []; // Keep list hidden on error
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        shadowColor: Colors.transparent,
        elevation: 0,
        title: const Text('Available Devices'),
      ),
      body: Center(
        child: _errorMessage != null
            ? Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    _errorMessage!,
                    style: Theme.of(context).textTheme.labelMedium,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: _startScan,
                    style: Theme.of(context).elevatedButtonTheme.style,
                    child: const Text('Retry'),
                  ),
                ],
              )
            : _isPairing
                ? const CircularProgressIndicator(color: Colors.deepPurple)
                : _isScanning
                    ? const CircularProgressIndicator(color: Colors.deepPurple)
                    : _devices.isEmpty
                        ? Text(
                            'No devices found',
                            style: Theme.of(context).textTheme.bodyMedium,
                          )
                        : ListView.builder(
                            padding: const EdgeInsets.all(16),
                            itemCount: _devices.length,
                            itemBuilder: (context, index) {
                              final device = _devices[index];
                              return ListTile(
                                title: Text(
                                  device.name.isNotEmpty ? device.name : 'Unknown Device',
                                  style: Theme.of(context).textTheme.bodyMedium,
                                ),
                                subtitle: Text(
                                  device.id,
                                  style: Theme.of(context).textTheme.bodySmall,
                                ),
                                onTap: () => _pairAndSaveDevice(device),
                              );
                            },
                          ),
      ),
    );
  }
}