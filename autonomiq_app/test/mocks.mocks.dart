// Mocks generated by Mockito 5.4.6 from annotations
// in autonomiq_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i14;
import 'dart:ui' as _i18;

import 'package:autonomiq_app/models/user_model.dart' as _i8;
import 'package:autonomiq_app/models/vehicle_model.dart' as _i9;
import 'package:autonomiq_app/providers/auth_provider.dart' as _i17;
import 'package:autonomiq_app/providers/vehicle_provider.dart' as _i20;
import 'package:autonomiq_app/repositories/user_repository.dart' as _i15;
import 'package:autonomiq_app/repositories/vehicle_repository.dart' as _i16;
import 'package:autonomiq_app/services/auth_service.dart' as _i19;
import 'package:autonomiq_app/services/ble_service.dart' as _i21;
import 'package:autonomiq_app/services/permission_service.dart' as _i11;
import 'package:autonomiq_app/utils/bluetooth_adapter.dart' as _i10;
import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i5;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i3;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:flutter_reactive_ble/flutter_reactive_ble.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:permission_handler/permission_handler.dart' as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeActionCodeInfo_1 extends _i1.SmartFake
    implements _i3.ActionCodeInfo {
  _FakeActionCodeInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCredential_2 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConfirmationResult_3 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserMetadata_4 extends _i1.SmartFake implements _i3.UserMetadata {
  _FakeUserMetadata_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiFactor_5 extends _i1.SmartFake implements _i4.MultiFactor {
  _FakeMultiFactor_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIdTokenResult_6 extends _i1.SmartFake implements _i3.IdTokenResult {
  _FakeIdTokenResult_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUser_7 extends _i1.SmartFake implements _i4.User {
  _FakeUser_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettings_8 extends _i1.SmartFake implements _i5.Settings {
  _FakeSettings_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollectionReference_9<T extends Object?> extends _i1.SmartFake
    implements _i6.CollectionReference<T> {
  _FakeCollectionReference_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWriteBatch_10 extends _i1.SmartFake implements _i6.WriteBatch {
  _FakeWriteBatch_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoadBundleTask_11 extends _i1.SmartFake
    implements _i6.LoadBundleTask {
  _FakeLoadBundleTask_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_12<T1 extends Object?> extends _i1.SmartFake
    implements _i6.QuerySnapshot<T1> {
  _FakeQuerySnapshot_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuery_13<T extends Object?> extends _i1.SmartFake
    implements _i6.Query<T> {
  _FakeQuery_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentReference_14<T extends Object?> extends _i1.SmartFake
    implements _i6.DocumentReference<T> {
  _FakeDocumentReference_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_15<T1> extends _i1.SmartFake implements _i7.Future<T1> {
  _FakeFuture_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseFirestore_16 extends _i1.SmartFake
    implements _i6.FirebaseFirestore {
  _FakeFirebaseFirestore_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAggregateQuery_17 extends _i1.SmartFake
    implements _i6.AggregateQuery {
  _FakeAggregateQuery_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_18<T1 extends Object?> extends _i1.SmartFake
    implements _i6.DocumentSnapshot<T1> {
  _FakeDocumentSnapshot_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_19 extends _i1.SmartFake
    implements _i6.SnapshotMetadata {
  _FakeSnapshotMetadata_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserModel_20 extends _i1.SmartFake implements _i8.UserModel {
  _FakeUserModel_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseAuth_21 extends _i1.SmartFake implements _i4.FirebaseAuth {
  _FakeFirebaseAuth_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVehicle_22 extends _i1.SmartFake implements _i9.Vehicle {
  _FakeVehicle_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBluetoothAdapter_23 extends _i1.SmartFake
    implements _i10.BluetoothAdapter {
  _FakeBluetoothAdapter_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePermissionService_24 extends _i1.SmartFake
    implements _i11.PermissionService {
  _FakePermissionService_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDiscoveredDevice_25 extends _i1.SmartFake
    implements _i12.DiscoveredDevice {
  _FakeDiscoveredDevice_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConnectionStateUpdate_26 extends _i1.SmartFake
    implements _i12.ConnectionStateUpdate {
  _FakeConnectionStateUpdate_26(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUuid_27 extends _i1.SmartFake implements _i12.Uuid {
  _FakeUuid_27(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
    Invocation.setter(#tenantId, tenantId),
    returnValueForMissingStub: null,
  );

  @override
  set customAuthDomain(String? customAuthDomain) => super.noSuchMethod(
    Invocation.setter(#customAuthDomain, customAuthDomain),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i7.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #useAuthEmulator,
              [host, port],
              {#automaticHostMapping: automaticHostMapping},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#applyActionCode, [code]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i3.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#checkActionCode, [code]),
            returnValue: _i7.Future<_i3.ActionCodeInfo>.value(
              _FakeActionCodeInfo_1(
                this,
                Invocation.method(#checkActionCode, [code]),
              ),
            ),
          )
          as _i7.Future<_i3.ActionCodeInfo>);

  @override
  _i7.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#confirmPasswordReset, [], {
              #code: code,
              #newPassword: newPassword,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i4.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSignInMethodsForEmail, [email]),
            returnValue: _i7.Future<List<String>>.value(<String>[]),
          )
          as _i7.Future<List<String>>);

  @override
  _i7.Future<_i4.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(
            Invocation.method(#getRedirectResult, []),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#getRedirectResult, []),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) =>
      (super.noSuchMethod(
            Invocation.method(#isSignInWithEmailLink, [emailLink]),
            returnValue: false,
          )
          as bool);

  @override
  _i7.Stream<_i4.User?> authStateChanges() =>
      (super.noSuchMethod(
            Invocation.method(#authStateChanges, []),
            returnValue: _i7.Stream<_i4.User?>.empty(),
          )
          as _i7.Stream<_i4.User?>);

  @override
  _i7.Stream<_i4.User?> idTokenChanges() =>
      (super.noSuchMethod(
            Invocation.method(#idTokenChanges, []),
            returnValue: _i7.Stream<_i4.User?>.empty(),
          )
          as _i7.Stream<_i4.User?>);

  @override
  _i7.Stream<_i4.User?> userChanges() =>
      (super.noSuchMethod(
            Invocation.method(#userChanges, []),
            returnValue: _i7.Stream<_i4.User?>.empty(),
          )
          as _i7.Stream<_i4.User?>);

  @override
  _i7.Future<void> sendPasswordResetEmail({
    required String? email,
    _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendSignInLinkToEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguageCode, [languageCode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setSettings, [], {
              #appVerificationDisabledForTesting:
                  appVerificationDisabledForTesting,
              #userAccessGroup: userAccessGroup,
              #phoneNumber: phoneNumber,
              #smsCode: smsCode,
              #forceRecaptchaFlow: forceRecaptchaFlow,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setPersistence(_i3.Persistence? persistence) =>
      (super.noSuchMethod(
            Invocation.method(#setPersistence, [persistence]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i4.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInAnonymously, []),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> signInWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCredential, [credential]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithCredential, [credential]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCustomToken, [token]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithCustomToken, [token]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailLink, [], {
              #email: email,
              #emailLink: emailLink,
            }),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithEmailLink, [], {
                  #email: email,
                  #emailLink: emailLink,
                }),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> signInWithProvider(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithProvider, [provider]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithProvider, [provider]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
            returnValue: _i7.Future<_i4.ConfirmationResult>.value(
              _FakeConfirmationResult_3(
                this,
                Invocation.method(#signInWithPhoneNumber, [
                  phoneNumber,
                  verifier,
                ]),
              ),
            ),
          )
          as _i7.Future<_i4.ConfirmationResult>);

  @override
  _i7.Future<_i4.UserCredential> signInWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPopup, [provider]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithPopup, [provider]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<void> signInWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithRedirect, [provider]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPasswordResetCode, [code]),
            returnValue: _i7.Future<String>.value(
              _i13.dummyValue<String>(
                this,
                Invocation.method(#verifyPasswordResetCode, [code]),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i3.PhoneMultiFactorInfo? multiFactorInfo,
    required _i3.PhoneVerificationCompleted? verificationCompleted,
    required _i3.PhoneVerificationFailed? verificationFailed,
    required _i3.PhoneCodeSent? codeSent,
    required _i3.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i3.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPhoneNumber, [], {
              #phoneNumber: phoneNumber,
              #multiFactorInfo: multiFactorInfo,
              #verificationCompleted: verificationCompleted,
              #verificationFailed: verificationFailed,
              #codeSent: codeSent,
              #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
              #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
              #timeout: timeout,
              #forceResendingToken: forceResendingToken,
              #multiFactorSession: multiFactorSession,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> revokeTokenWithAuthorizationCode(
    String? authorizationCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#revokeTokenWithAuthorizationCode, [
              authorizationCode,
            ]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> initializeRecaptchaConfig() =>
      (super.noSuchMethod(
            Invocation.method(#initializeRecaptchaConfig, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);

  @override
  _i3.UserMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeUserMetadata_4(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i3.UserMetadata);

  @override
  List<_i3.UserInfo> get providerData =>
      (super.noSuchMethod(
            Invocation.getter(#providerData),
            returnValue: <_i3.UserInfo>[],
          )
          as List<_i3.UserInfo>);

  @override
  String get uid =>
      (super.noSuchMethod(
            Invocation.getter(#uid),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#uid)),
          )
          as String);

  @override
  _i4.MultiFactor get multiFactor =>
      (super.noSuchMethod(
            Invocation.getter(#multiFactor),
            returnValue: _FakeMultiFactor_5(
              this,
              Invocation.getter(#multiFactor),
            ),
          )
          as _i4.MultiFactor);

  @override
  _i7.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String?> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(
            Invocation.method(#getIdToken, [forceRefresh]),
            returnValue: _i7.Future<String?>.value(),
          )
          as _i7.Future<String?>);

  @override
  _i7.Future<_i3.IdTokenResult> getIdTokenResult([
    bool? forceRefresh = false,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#getIdTokenResult, [forceRefresh]),
            returnValue: _i7.Future<_i3.IdTokenResult>.value(
              _FakeIdTokenResult_6(
                this,
                Invocation.method(#getIdTokenResult, [forceRefresh]),
              ),
            ),
          )
          as _i7.Future<_i3.IdTokenResult>);

  @override
  _i7.Future<_i4.UserCredential> linkWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithCredential, [credential]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithCredential, [credential]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> linkWithProvider(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithProvider, [provider]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithProvider, [provider]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> reauthenticateWithProvider(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithProvider, [provider]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithProvider, [provider]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> reauthenticateWithPopup(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithPopup, [provider]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithPopup, [provider]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<void> reauthenticateWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithRedirect, [provider]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i4.UserCredential> linkWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithPopup, [provider]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithPopup, [provider]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<void> linkWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithRedirect, [provider]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i4.ConfirmationResult> linkWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
            returnValue: _i7.Future<_i4.ConfirmationResult>.value(
              _FakeConfirmationResult_3(
                this,
                Invocation.method(#linkWithPhoneNumber, [
                  phoneNumber,
                  verifier,
                ]),
              ),
            ),
          )
          as _i7.Future<_i4.ConfirmationResult>);

  @override
  _i7.Future<_i4.UserCredential> reauthenticateWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithCredential, [credential]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithCredential, [credential]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> sendEmailVerification([
    _i3.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#sendEmailVerification, [actionCodeSettings]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i4.User> unlink(String? providerId) =>
      (super.noSuchMethod(
            Invocation.method(#unlink, [providerId]),
            returnValue: _i7.Future<_i4.User>.value(
              _FakeUser_7(this, Invocation.method(#unlink, [providerId])),
            ),
          )
          as _i7.Future<_i4.User>);

  @override
  _i7.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(
            Invocation.method(#updateEmail, [newEmail]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(
            Invocation.method(#updatePassword, [newPassword]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updatePhoneNumber(
    _i3.PhoneAuthCredential? phoneCredential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhoneNumber, [phoneCredential]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
            Invocation.method(#updateDisplayName, [displayName]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhotoURL, [photoURL]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #displayName: displayName,
              #photoURL: photoURL,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> verifyBeforeUpdateEmail(
    String? newEmail, [
    _i3.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#verifyBeforeUpdateEmail, [
              newEmail,
              actionCodeSettings,
            ]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i4.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i6.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  String get databaseURL =>
      (super.noSuchMethod(
            Invocation.getter(#databaseURL),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#databaseURL),
            ),
          )
          as String);

  @override
  String get databaseId =>
      (super.noSuchMethod(
            Invocation.getter(#databaseId),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#databaseId),
            ),
          )
          as String);

  @override
  _i5.Settings get settings =>
      (super.noSuchMethod(
            Invocation.getter(#settings),
            returnValue: _FakeSettings_8(this, Invocation.getter(#settings)),
          )
          as _i5.Settings);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
    Invocation.setter(#databaseURL, _databaseURL),
    returnValueForMissingStub: null,
  );

  @override
  set databaseId(String? _databaseId) => super.noSuchMethod(
    Invocation.setter(#databaseId, _databaseId),
    returnValueForMissingStub: null,
  );

  @override
  set settings(_i5.Settings? settings) => super.noSuchMethod(
    Invocation.setter(#settings, settings),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i6.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
          )
          as _i6.CollectionReference<Map<String, dynamic>>);

  @override
  _i6.WriteBatch batch() =>
      (super.noSuchMethod(
            Invocation.method(#batch, []),
            returnValue: _FakeWriteBatch_10(
              this,
              Invocation.method(#batch, []),
            ),
          )
          as _i6.WriteBatch);

  @override
  _i7.Future<void> clearPersistence() =>
      (super.noSuchMethod(
            Invocation.method(#clearPersistence, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> enablePersistence([
    _i5.PersistenceSettings? persistenceSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#enablePersistence, [persistenceSettings]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i6.LoadBundleTask loadBundle(_i14.Uint8List? bundle) =>
      (super.noSuchMethod(
            Invocation.method(#loadBundle, [bundle]),
            returnValue: _FakeLoadBundleTask_11(
              this,
              Invocation.method(#loadBundle, [bundle]),
            ),
          )
          as _i6.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #useFirestoreEmulator,
      [host, port],
      {#sslEnabled: sslEnabled, #automaticHostMapping: automaticHostMapping},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<_i6.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i5.GetOptions? options = const _i5.GetOptions(),
    required _i6.FromFirestore<T>? fromFirestore,
    required _i6.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #namedQueryWithConverterGet,
              [name],
              {
                #options: options,
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              },
            ),
            returnValue: _i7.Future<_i6.QuerySnapshot<T>>.value(
              _FakeQuerySnapshot_12<T>(
                this,
                Invocation.method(
                  #namedQueryWithConverterGet,
                  [name],
                  {
                    #options: options,
                    #fromFirestore: fromFirestore,
                    #toFirestore: toFirestore,
                  },
                ),
              ),
            ),
          )
          as _i7.Future<_i6.QuerySnapshot<T>>);

  @override
  _i7.Future<_i6.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i5.GetOptions? options = const _i5.GetOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#namedQueryGet, [name], {#options: options}),
            returnValue:
                _i7.Future<_i6.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_12<Map<String, dynamic>>(
                    this,
                    Invocation.method(
                      #namedQueryGet,
                      [name],
                      {#options: options},
                    ),
                  ),
                ),
          )
          as _i7.Future<_i6.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i6.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
            Invocation.method(#collectionGroup, [collectionPath]),
            returnValue: _FakeQuery_13<Map<String, dynamic>>(
              this,
              Invocation.method(#collectionGroup, [collectionPath]),
            ),
          )
          as _i6.Query<Map<String, dynamic>>);

  @override
  _i7.Future<void> disableNetwork() =>
      (super.noSuchMethod(
            Invocation.method(#disableNetwork, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i6.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
            Invocation.method(#doc, [documentPath]),
            returnValue: _FakeDocumentReference_14<Map<String, dynamic>>(
              this,
              Invocation.method(#doc, [documentPath]),
            ),
          )
          as _i6.DocumentReference<Map<String, dynamic>>);

  @override
  _i7.Future<void> enableNetwork() =>
      (super.noSuchMethod(
            Invocation.method(#enableNetwork, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(
            Invocation.method(#snapshotsInSync, []),
            returnValue: _i7.Stream<void>.empty(),
          )
          as _i7.Stream<void>);

  @override
  _i7.Future<T> runTransaction<T>(
    _i6.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runTransaction,
              [transactionHandler],
              {#timeout: timeout, #maxAttempts: maxAttempts},
            ),
            returnValue:
                _i13.ifNotNull(
                  _i13.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runTransaction,
                      [transactionHandler],
                      {#timeout: timeout, #maxAttempts: maxAttempts},
                    ),
                  ),
                  (T v) => _i7.Future<T>.value(v),
                ) ??
                _FakeFuture_15<T>(
                  this,
                  Invocation.method(
                    #runTransaction,
                    [transactionHandler],
                    {#timeout: timeout, #maxAttempts: maxAttempts},
                  ),
                ),
          )
          as _i7.Future<T>);

  @override
  _i7.Future<void> terminate() =>
      (super.noSuchMethod(
            Invocation.method(#terminate, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(
            Invocation.method(#waitForPendingWrites, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setIndexConfiguration({
    required List<_i5.Index>? indexes,
    List<_i5.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setIndexConfiguration, [], {
              #indexes: indexes,
              #fieldOverrides: fieldOverrides,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
            Invocation.method(#setIndexConfigurationFromJSON, [json]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i6.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  _i6.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_16(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i6.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(
            Invocation.getter(#parameters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i7.Future<_i6.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(
            Invocation.method(#add, [data]),
            returnValue: _i7.Future<_i6.DocumentReference<T>>.value(
              _FakeDocumentReference_14<T>(
                this,
                Invocation.method(#add, [data]),
              ),
            ),
          )
          as _i7.Future<_i6.DocumentReference<T>>);

  @override
  _i6.DocumentReference<T> doc([String? path]) =>
      (super.noSuchMethod(
            Invocation.method(#doc, [path]),
            returnValue: _FakeDocumentReference_14<T>(
              this,
              Invocation.method(#doc, [path]),
            ),
          )
          as _i6.DocumentReference<T>);

  @override
  _i6.CollectionReference<R> withConverter<R extends Object?>({
    required _i6.FromFirestore<R>? fromFirestore,
    required _i6.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeCollectionReference_9<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i6.CollectionReference<R>);

  @override
  _i6.Query<T> endAtDocument(_i6.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
            Invocation.method(#endAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#endAtDocument, [documentSnapshot]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> endAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endAt, [values]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#endAt, [values]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> endBeforeDocument(
    _i6.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#endBeforeDocument, [documentSnapshot]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> endBefore(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#endBefore, [values]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#endBefore, [values]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i7.Future<_i6.QuerySnapshot<T>> get([_i5.GetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue: _i7.Future<_i6.QuerySnapshot<T>>.value(
              _FakeQuerySnapshot_12<T>(
                this,
                Invocation.method(#get, [options]),
              ),
            ),
          )
          as _i7.Future<_i6.QuerySnapshot<T>>);

  @override
  _i6.Query<T> limit(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limit, [limit]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#limit, [limit]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> limitToLast(int? limit) =>
      (super.noSuchMethod(
            Invocation.method(#limitToLast, [limit]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#limitToLast, [limit]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i7.Stream<_i6.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i5.ListenSource? source = _i5.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue: _i7.Stream<_i6.QuerySnapshot<T>>.empty(),
          )
          as _i7.Stream<_i6.QuerySnapshot<T>>);

  @override
  _i6.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
            Invocation.method(#orderBy, [field], {#descending: descending}),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#orderBy, [field], {#descending: descending}),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> startAfterDocument(
    _i6.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAfterDocument, [documentSnapshot]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#startAfterDocument, [documentSnapshot]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> startAfter(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAfter, [values]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#startAfter, [values]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> startAtDocument(
    _i6.DocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAtDocument, [documentSnapshot]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#startAtDocument, [documentSnapshot]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> startAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
            Invocation.method(#startAt, [values]),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(#startAt, [values]),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #where,
              [field],
              {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull,
              },
            ),
            returnValue: _FakeQuery_13<T>(
              this,
              Invocation.method(
                #where,
                [field],
                {
                  #isEqualTo: isEqualTo,
                  #isNotEqualTo: isNotEqualTo,
                  #isLessThan: isLessThan,
                  #isLessThanOrEqualTo: isLessThanOrEqualTo,
                  #isGreaterThan: isGreaterThan,
                  #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                  #arrayContains: arrayContains,
                  #arrayContainsAny: arrayContainsAny,
                  #whereIn: whereIn,
                  #whereNotIn: whereNotIn,
                  #isNull: isNull,
                },
              ),
            ),
          )
          as _i6.Query<T>);

  @override
  _i6.AggregateQuery count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _FakeAggregateQuery_17(
              this,
              Invocation.method(#count, []),
            ),
          )
          as _i6.AggregateQuery);

  @override
  _i6.AggregateQuery aggregate(
    _i5.AggregateField? aggregateField1, [
    _i5.AggregateField? aggregateField2,
    _i5.AggregateField? aggregateField3,
    _i5.AggregateField? aggregateField4,
    _i5.AggregateField? aggregateField5,
    _i5.AggregateField? aggregateField6,
    _i5.AggregateField? aggregateField7,
    _i5.AggregateField? aggregateField8,
    _i5.AggregateField? aggregateField9,
    _i5.AggregateField? aggregateField10,
    _i5.AggregateField? aggregateField11,
    _i5.AggregateField? aggregateField12,
    _i5.AggregateField? aggregateField13,
    _i5.AggregateField? aggregateField14,
    _i5.AggregateField? aggregateField15,
    _i5.AggregateField? aggregateField16,
    _i5.AggregateField? aggregateField17,
    _i5.AggregateField? aggregateField18,
    _i5.AggregateField? aggregateField19,
    _i5.AggregateField? aggregateField20,
    _i5.AggregateField? aggregateField21,
    _i5.AggregateField? aggregateField22,
    _i5.AggregateField? aggregateField23,
    _i5.AggregateField? aggregateField24,
    _i5.AggregateField? aggregateField25,
    _i5.AggregateField? aggregateField26,
    _i5.AggregateField? aggregateField27,
    _i5.AggregateField? aggregateField28,
    _i5.AggregateField? aggregateField29,
    _i5.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#aggregate, [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ]),
            returnValue: _FakeAggregateQuery_17(
              this,
              Invocation.method(#aggregate, [
                aggregateField1,
                aggregateField2,
                aggregateField3,
                aggregateField4,
                aggregateField5,
                aggregateField6,
                aggregateField7,
                aggregateField8,
                aggregateField9,
                aggregateField10,
                aggregateField11,
                aggregateField12,
                aggregateField13,
                aggregateField14,
                aggregateField15,
                aggregateField16,
                aggregateField17,
                aggregateField18,
                aggregateField19,
                aggregateField20,
                aggregateField21,
                aggregateField22,
                aggregateField23,
                aggregateField24,
                aggregateField25,
                aggregateField26,
                aggregateField27,
                aggregateField28,
                aggregateField29,
                aggregateField30,
              ]),
            ),
          )
          as _i6.AggregateQuery);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i6.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_16(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i6.FirebaseFirestore);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i6.CollectionReference<T> get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeCollectionReference_9<T>(
              this,
              Invocation.getter(#parent),
            ),
          )
          as _i6.CollectionReference<T>);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  _i6.CollectionReference<Map<String, dynamic>> collection(
    String? collectionPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#collection, [collectionPath]),
            returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
              this,
              Invocation.method(#collection, [collectionPath]),
            ),
          )
          as _i6.CollectionReference<Map<String, dynamic>>);

  @override
  _i7.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> update(Map<Object, Object?>? data) =>
      (super.noSuchMethod(
            Invocation.method(#update, [data]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i6.DocumentSnapshot<T>> get([_i5.GetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [options]),
            returnValue: _i7.Future<_i6.DocumentSnapshot<T>>.value(
              _FakeDocumentSnapshot_18<T>(
                this,
                Invocation.method(#get, [options]),
              ),
            ),
          )
          as _i7.Future<_i6.DocumentSnapshot<T>>);

  @override
  _i7.Stream<_i6.DocumentSnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i5.ListenSource? source = _i5.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#snapshots, [], {
              #includeMetadataChanges: includeMetadataChanges,
              #source: source,
            }),
            returnValue: _i7.Stream<_i6.DocumentSnapshot<T>>.empty(),
          )
          as _i7.Stream<_i6.DocumentSnapshot<T>>);

  @override
  _i7.Future<void> set(T? data, [_i5.SetOptions? options]) =>
      (super.noSuchMethod(
            Invocation.method(#set, [data, options]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i6.DocumentReference<R> withConverter<R>({
    required _i6.FromFirestore<R>? fromFirestore,
    required _i6.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#withConverter, [], {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            }),
            returnValue: _FakeDocumentReference_14<R>(
              this,
              Invocation.method(#withConverter, [], {
                #fromFirestore: fromFirestore,
                #toFirestore: toFirestore,
              }),
            ),
          )
          as _i6.DocumentReference<R>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i6.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i6.DocumentReference<T> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_14<T>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i6.DocumentReference<T>);

  @override
  _i6.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_19(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i6.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i6.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(
            Invocation.getter(#docs),
            returnValue: <_i6.QueryDocumentSnapshot<T>>[],
          )
          as List<_i6.QueryDocumentSnapshot<T>>);

  @override
  List<_i6.DocumentChange<T>> get docChanges =>
      (super.noSuchMethod(
            Invocation.getter(#docChanges),
            returnValue: <_i6.DocumentChange<T>>[],
          )
          as List<_i6.DocumentChange<T>>);

  @override
  _i6.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_19(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i6.SnapshotMetadata);

  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i6.QueryDocumentSnapshot<T> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i6.DocumentReference<T> get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _FakeDocumentReference_14<T>(
              this,
              Invocation.getter(#reference),
            ),
          )
          as _i6.DocumentReference<T>);

  @override
  _i6.SnapshotMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeSnapshotMetadata_19(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i6.SnapshotMetadata);

  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);

  @override
  T data() =>
      (super.noSuchMethod(
            Invocation.method(#data, []),
            returnValue: _i13.dummyValue<T>(this, Invocation.method(#data, [])),
          )
          as T);

  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));

  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i15.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_16(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i6.FirebaseFirestore);

  @override
  _i7.Future<void> createUserIfNotExists(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#createUserIfNotExists, [uid]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i8.UserModel> getUser(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [uid]),
            returnValue: _i7.Future<_i8.UserModel>.value(
              _FakeUserModel_20(this, Invocation.method(#getUser, [uid])),
            ),
          )
          as _i7.Future<_i8.UserModel>);

  @override
  _i7.Future<void> updateField(String? uid, String? field, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#updateField, [uid, field, value]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [VehicleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehicleRepository extends _i1.Mock implements _i16.VehicleRepository {
  MockVehicleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_16(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i6.FirebaseFirestore);

  @override
  _i7.Future<List<_i9.Vehicle>> getVehicles(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getVehicles, [uid]),
            returnValue: _i7.Future<List<_i9.Vehicle>>.value(<_i9.Vehicle>[]),
          )
          as _i7.Future<List<_i9.Vehicle>>);

  @override
  _i7.Future<String> addVehicle(String? uid, _i9.Vehicle? newVehicle) =>
      (super.noSuchMethod(
            Invocation.method(#addVehicle, [uid, newVehicle]),
            returnValue: _i7.Future<String>.value(
              _i13.dummyValue<String>(
                this,
                Invocation.method(#addVehicle, [uid, newVehicle]),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> removeVehicle(String? uid, String? vehicleId) =>
      (super.noSuchMethod(
            Invocation.method(#removeVehicle, [uid, vehicleId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [AppAuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppAuthProvider extends _i1.Mock implements _i17.AppAuthProvider {
  MockAppAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  _i4.FirebaseAuth get firebaseAuth =>
      (super.noSuchMethod(
            Invocation.getter(#firebaseAuth),
            returnValue: _FakeFirebaseAuth_21(
              this,
              Invocation.getter(#firebaseAuth),
            ),
          )
          as _i4.FirebaseAuth);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i7.Future<void> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> signInWithEmail(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, [email, password]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> linkAnonymousToEmail(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#linkAnonymousToEmail, [email, password]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i19.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInAnonymously, []),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);

  @override
  _i7.Future<_i4.UserCredential> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i7.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i7.Future<_i4.UserCredential>);
}

/// A class which mocks [VehicleProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehicleProvider extends _i1.Mock implements _i20.VehicleProvider {
  MockVehicleProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.Vehicle> get vehicles =>
      (super.noSuchMethod(
            Invocation.getter(#vehicles),
            returnValue: <_i9.Vehicle>[],
          )
          as List<_i9.Vehicle>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void updateAuth(_i4.FirebaseAuth? auth) => super.noSuchMethod(
    Invocation.method(#updateAuth, [auth]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> loadVehicles() =>
      (super.noSuchMethod(
            Invocation.method(#loadVehicles, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void selectVehicle(_i9.Vehicle? vehicle) => super.noSuchMethod(
    Invocation.method(#selectVehicle, [vehicle]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> addVehicle(_i9.Vehicle? newVehicle) =>
      (super.noSuchMethod(
            Invocation.method(#addVehicle, [newVehicle]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> removeVehicle(String? vehicleId) =>
      (super.noSuchMethod(
            Invocation.method(#removeVehicle, [vehicleId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Vehicle].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehicle extends _i1.Mock implements _i9.Vehicle {
  MockVehicle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  String get vin =>
      (super.noSuchMethod(
            Invocation.getter(#vin),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#vin)),
          )
          as String);

  @override
  int get year =>
      (super.noSuchMethod(Invocation.getter(#year), returnValue: 0) as int);

  @override
  int get odometer =>
      (super.noSuchMethod(Invocation.getter(#odometer), returnValue: 0) as int);

  @override
  List<String> get diagnosticTroubleCodes =>
      (super.noSuchMethod(
            Invocation.getter(#diagnosticTroubleCodes),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  String get deviceId =>
      (super.noSuchMethod(
            Invocation.getter(#deviceId),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#deviceId),
            ),
          )
          as String);

  @override
  set id(String? _id) => super.noSuchMethod(
    Invocation.setter(#id, _id),
    returnValueForMissingStub: null,
  );

  @override
  set name(String? _name) => super.noSuchMethod(
    Invocation.setter(#name, _name),
    returnValueForMissingStub: null,
  );

  @override
  set vin(String? _vin) => super.noSuchMethod(
    Invocation.setter(#vin, _vin),
    returnValueForMissingStub: null,
  );

  @override
  set year(int? _year) => super.noSuchMethod(
    Invocation.setter(#year, _year),
    returnValueForMissingStub: null,
  );

  @override
  set odometer(int? _odometer) => super.noSuchMethod(
    Invocation.setter(#odometer, _odometer),
    returnValueForMissingStub: null,
  );

  @override
  set diagnosticTroubleCodes(List<String>? _diagnosticTroubleCodes) =>
      super.noSuchMethod(
        Invocation.setter(#diagnosticTroubleCodes, _diagnosticTroubleCodes),
        returnValueForMissingStub: null,
      );

  @override
  set deviceId(String? _deviceId) => super.noSuchMethod(
    Invocation.setter(#deviceId, _deviceId),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void updateName(String? newName) => super.noSuchMethod(
    Invocation.method(#updateName, [newName]),
    returnValueForMissingStub: null,
  );

  @override
  void updateVin(String? newVin) => super.noSuchMethod(
    Invocation.method(#updateVin, [newVin]),
    returnValueForMissingStub: null,
  );

  @override
  void updateYear(int? newYear) => super.noSuchMethod(
    Invocation.method(#updateYear, [newYear]),
    returnValueForMissingStub: null,
  );

  @override
  void updateOdometer(int? newOdometer) => super.noSuchMethod(
    Invocation.method(#updateOdometer, [newOdometer]),
    returnValueForMissingStub: null,
  );

  @override
  void addDiagnosticTroubleCode(String? code) => super.noSuchMethod(
    Invocation.method(#addDiagnosticTroubleCode, [code]),
    returnValueForMissingStub: null,
  );

  @override
  void removeDiagnosticTroubleCode(String? code) => super.noSuchMethod(
    Invocation.method(#removeDiagnosticTroubleCode, [code]),
    returnValueForMissingStub: null,
  );

  @override
  void clearDiagnosticTroubleCodes() => super.noSuchMethod(
    Invocation.method(#clearDiagnosticTroubleCodes, []),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Vehicle copyWith({
    String? deviceId,
    String? id,
    String? name,
    String? vin,
    int? year,
    int? odometer,
    List<String>? diagnosticTroubleCodes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #deviceId: deviceId,
              #id: id,
              #name: name,
              #vin: vin,
              #year: year,
              #odometer: odometer,
              #diagnosticTroubleCodes: diagnosticTroubleCodes,
            }),
            returnValue: _FakeVehicle_22(
              this,
              Invocation.method(#copyWith, [], {
                #deviceId: deviceId,
                #id: id,
                #name: name,
                #vin: vin,
                #year: year,
                #odometer: odometer,
                #diagnosticTroubleCodes: diagnosticTroubleCodes,
              }),
            ),
          )
          as _i9.Vehicle);
}

/// A class which mocks [BleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBleService extends _i1.Mock implements _i21.BleService {
  MockBleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.BluetoothAdapter get adapter =>
      (super.noSuchMethod(
            Invocation.getter(#adapter),
            returnValue: _FakeBluetoothAdapter_23(
              this,
              Invocation.getter(#adapter),
            ),
          )
          as _i10.BluetoothAdapter);

  @override
  _i11.PermissionService get permissionService =>
      (super.noSuchMethod(
            Invocation.getter(#permissionService),
            returnValue: _FakePermissionService_24(
              this,
              Invocation.getter(#permissionService),
            ),
          )
          as _i11.PermissionService);

  @override
  _i7.Stream<_i12.DeviceConnectionState> get connectionStateStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStateStream),
            returnValue: _i7.Stream<_i12.DeviceConnectionState>.empty(),
          )
          as _i7.Stream<_i12.DeviceConnectionState>);

  @override
  _i7.Future<List<_i12.DiscoveredDevice>> scanForDevices({
    Duration? timeout = const Duration(seconds: 5),
    List<_i12.Uuid>? withServices = const [],
  }) =>
      (super.noSuchMethod(
            Invocation.method(#scanForDevices, [], {
              #timeout: timeout,
              #withServices: withServices,
            }),
            returnValue: _i7.Future<List<_i12.DiscoveredDevice>>.value(
              <_i12.DiscoveredDevice>[],
            ),
          )
          as _i7.Future<List<_i12.DiscoveredDevice>>);

  @override
  _i7.Future<void> connectToDevice(
    _i12.DiscoveredDevice? device, {
    Map<_i12.Uuid, List<_i12.Uuid>>? servicesWithCharacteristicsToDiscover,
    Duration? connectionTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #connectToDevice,
              [device],
              {
                #servicesWithCharacteristicsToDiscover:
                    servicesWithCharacteristicsToDiscover,
                #connectionTimeout: connectionTimeout,
              },
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> disconnectDevice() =>
      (super.noSuchMethod(
            Invocation.method(#disconnectDevice, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i12.DeviceConnectionState getDeviceState() =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceState, []),
            returnValue: _i12.DeviceConnectionState.connecting,
          )
          as _i12.DeviceConnectionState);

  @override
  _i7.Stream<_i12.DeviceConnectionState> getDeviceStateStream() =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceStateStream, []),
            returnValue: _i7.Stream<_i12.DeviceConnectionState>.empty(),
          )
          as _i7.Stream<_i12.DeviceConnectionState>);

  @override
  _i7.Future<int> requestMtu({required int? mtu, required String? deviceId}) =>
      (super.noSuchMethod(
            Invocation.method(#requestMtu, [], {
              #mtu: mtu,
              #deviceId: deviceId,
            }),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<void> clearGattCache(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#clearGattCache, [deviceId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<int>> readCharacteristic(
    _i12.QualifiedCharacteristic? characteristic,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readCharacteristic, [characteristic]),
            returnValue: _i7.Future<List<int>>.value(<int>[]),
          )
          as _i7.Future<List<int>>);

  @override
  _i7.Future<void> writeCharacteristic(
    _i12.QualifiedCharacteristic? characteristic,
    List<int>? value, {
    bool? withResponse = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeCharacteristic,
              [characteristic, value],
              {#withResponse: withResponse},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> requestPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [BluetoothAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothAdapter extends _i1.Mock implements _i10.BluetoothAdapter {
  MockBluetoothAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i12.BleStatus> get statusStream =>
      (super.noSuchMethod(
            Invocation.getter(#statusStream),
            returnValue: _i7.Stream<_i12.BleStatus>.empty(),
          )
          as _i7.Stream<_i12.BleStatus>);

  @override
  _i7.Stream<_i12.DiscoveredDevice> scanForDevices({
    List<_i12.Uuid>? withServices,
    _i12.ScanMode? scanMode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#scanForDevices, [], {
              #withServices: withServices,
              #scanMode: scanMode,
            }),
            returnValue: _i7.Stream<_i12.DiscoveredDevice>.empty(),
          )
          as _i7.Stream<_i12.DiscoveredDevice>);

  @override
  _i7.Stream<_i12.ConnectionStateUpdate> connectToDevice({
    required String? id,
    Map<_i12.Uuid, List<_i12.Uuid>>? servicesWithCharacteristicsToDiscover,
    Duration? connectionTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#connectToDevice, [], {
              #id: id,
              #servicesWithCharacteristicsToDiscover:
                  servicesWithCharacteristicsToDiscover,
              #connectionTimeout: connectionTimeout,
            }),
            returnValue: _i7.Stream<_i12.ConnectionStateUpdate>.empty(),
          )
          as _i7.Stream<_i12.ConnectionStateUpdate>);

  @override
  _i7.Future<List<int>> readCharacteristic(
    _i12.QualifiedCharacteristic? characteristic,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#readCharacteristic, [characteristic]),
            returnValue: _i7.Future<List<int>>.value(<int>[]),
          )
          as _i7.Future<List<int>>);

  @override
  _i7.Future<void> writeCharacteristicWithResponse(
    _i12.QualifiedCharacteristic? characteristic, {
    required List<int>? value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeCharacteristicWithResponse,
              [characteristic],
              {#value: value},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> writeCharacteristicWithoutResponse(
    _i12.QualifiedCharacteristic? characteristic, {
    required List<int>? value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeCharacteristicWithoutResponse,
              [characteristic],
              {#value: value},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<int> requestMtu({required String? deviceId, required int? mtu}) =>
      (super.noSuchMethod(
            Invocation.method(#requestMtu, [], {
              #deviceId: deviceId,
              #mtu: mtu,
            }),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<void> clearGattCache(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#clearGattCache, [deviceId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [DiscoveredDevice].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDiscoveredDevice extends _i1.Mock implements _i12.DiscoveredDevice {
  MockDiscoveredDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i13.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  Map<_i12.Uuid, _i14.Uint8List> get serviceData =>
      (super.noSuchMethod(
            Invocation.getter(#serviceData),
            returnValue: <_i12.Uuid, _i14.Uint8List>{},
          )
          as Map<_i12.Uuid, _i14.Uint8List>);

  @override
  List<_i12.Uuid> get serviceUuids =>
      (super.noSuchMethod(
            Invocation.getter(#serviceUuids),
            returnValue: <_i12.Uuid>[],
          )
          as List<_i12.Uuid>);

  @override
  _i14.Uint8List get manufacturerData =>
      (super.noSuchMethod(
            Invocation.getter(#manufacturerData),
            returnValue: _i14.Uint8List(0),
          )
          as _i14.Uint8List);

  @override
  int get rssi =>
      (super.noSuchMethod(Invocation.getter(#rssi), returnValue: 0) as int);

  @override
  _i12.Connectable get connectable =>
      (super.noSuchMethod(
            Invocation.getter(#connectable),
            returnValue: _i12.Connectable.unknown,
          )
          as _i12.Connectable);

  @override
  _i12.DiscoveredDevice copyWith({
    String? id,
    String? name,
    Map<_i12.Uuid, _i14.Uint8List>? serviceData,
    List<_i12.Uuid>? serviceUuids,
    _i14.Uint8List? manufacturerData,
    int? rssi,
    _i12.Connectable? connectable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #id: id,
              #name: name,
              #serviceData: serviceData,
              #serviceUuids: serviceUuids,
              #manufacturerData: manufacturerData,
              #rssi: rssi,
              #connectable: connectable,
            }),
            returnValue: _FakeDiscoveredDevice_25(
              this,
              Invocation.method(#copyWith, [], {
                #id: id,
                #name: name,
                #serviceData: serviceData,
                #serviceUuids: serviceUuids,
                #manufacturerData: manufacturerData,
                #rssi: rssi,
                #connectable: connectable,
              }),
            ),
          )
          as _i12.DiscoveredDevice);

  @override
  _i12.DiscoveredDevice copyUsing(
    void Function(_i12.DiscoveredDevice$Change)? mutator,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#copyUsing, [mutator]),
            returnValue: _FakeDiscoveredDevice_25(
              this,
              Invocation.method(#copyUsing, [mutator]),
            ),
          )
          as _i12.DiscoveredDevice);
}

/// A class which mocks [ConnectionStateUpdate].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockConnectionStateUpdate extends _i1.Mock
    implements _i12.ConnectionStateUpdate {
  MockConnectionStateUpdate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get deviceId =>
      (super.noSuchMethod(
            Invocation.getter(#deviceId),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#deviceId),
            ),
          )
          as String);

  @override
  _i12.DeviceConnectionState get connectionState =>
      (super.noSuchMethod(
            Invocation.getter(#connectionState),
            returnValue: _i12.DeviceConnectionState.connecting,
          )
          as _i12.DeviceConnectionState);

  @override
  _i12.ConnectionStateUpdate copyWith({
    String? deviceId,
    _i12.DeviceConnectionState? connectionState,
    _i12.GenericFailure<_i12.ConnectionError>? failure,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #deviceId: deviceId,
              #connectionState: connectionState,
              #failure: failure,
            }),
            returnValue: _FakeConnectionStateUpdate_26(
              this,
              Invocation.method(#copyWith, [], {
                #deviceId: deviceId,
                #connectionState: connectionState,
                #failure: failure,
              }),
            ),
          )
          as _i12.ConnectionStateUpdate);

  @override
  _i12.ConnectionStateUpdate copyUsing(
    void Function(_i12.ConnectionStateUpdate$Change)? mutator,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#copyUsing, [mutator]),
            returnValue: _FakeConnectionStateUpdate_26(
              this,
              Invocation.method(#copyUsing, [mutator]),
            ),
          )
          as _i12.ConnectionStateUpdate);
}

/// A class which mocks [QualifiedCharacteristic].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQualifiedCharacteristic extends _i1.Mock
    implements _i12.QualifiedCharacteristic {
  MockQualifiedCharacteristic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Uuid get characteristicId =>
      (super.noSuchMethod(
            Invocation.getter(#characteristicId),
            returnValue: _FakeUuid_27(
              this,
              Invocation.getter(#characteristicId),
            ),
          )
          as _i12.Uuid);

  @override
  _i12.Uuid get serviceId =>
      (super.noSuchMethod(
            Invocation.getter(#serviceId),
            returnValue: _FakeUuid_27(this, Invocation.getter(#serviceId)),
          )
          as _i12.Uuid);

  @override
  String get deviceId =>
      (super.noSuchMethod(
            Invocation.getter(#deviceId),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#deviceId),
            ),
          )
          as String);
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i7.StreamSubscription<T> {
  MockStreamSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  _i7.Future<void> cancel() =>
      (super.noSuchMethod(
            Invocation.method(#cancel, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void onData(void Function(T)? handleData) => super.noSuchMethod(
    Invocation.method(#onData, [handleData]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Function? handleError) => super.noSuchMethod(
    Invocation.method(#onError, [handleError]),
    returnValueForMissingStub: null,
  );

  @override
  void onDone(void Function()? handleDone) => super.noSuchMethod(
    Invocation.method(#onDone, [handleDone]),
    returnValueForMissingStub: null,
  );

  @override
  void pause([_i7.Future<void>? resumeSignal]) => super.noSuchMethod(
    Invocation.method(#pause, [resumeSignal]),
    returnValueForMissingStub: null,
  );

  @override
  void resume() => super.noSuchMethod(
    Invocation.method(#resume, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<E> asFuture<E>([E? futureValue]) =>
      (super.noSuchMethod(
            Invocation.method(#asFuture, [futureValue]),
            returnValue:
                _i13.ifNotNull(
                  _i13.dummyValueOrNull<E>(
                    this,
                    Invocation.method(#asFuture, [futureValue]),
                  ),
                  (E v) => _i7.Future<E>.value(v),
                ) ??
                _FakeFuture_15<E>(
                  this,
                  Invocation.method(#asFuture, [futureValue]),
                ),
          )
          as _i7.Future<E>);
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i11.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i22.PermissionStatus> get bluetoothScanStatus =>
      (super.noSuchMethod(
            Invocation.getter(#bluetoothScanStatus),
            returnValue: _i7.Future<_i22.PermissionStatus>.value(
              _i22.PermissionStatus.denied,
            ),
          )
          as _i7.Future<_i22.PermissionStatus>);

  @override
  _i7.Future<_i22.PermissionStatus> get bluetoothConnectStatus =>
      (super.noSuchMethod(
            Invocation.getter(#bluetoothConnectStatus),
            returnValue: _i7.Future<_i22.PermissionStatus>.value(
              _i22.PermissionStatus.denied,
            ),
          )
          as _i7.Future<_i22.PermissionStatus>);

  @override
  _i7.Future<_i22.PermissionStatus> get locationStatus =>
      (super.noSuchMethod(
            Invocation.getter(#locationStatus),
            returnValue: _i7.Future<_i22.PermissionStatus>.value(
              _i22.PermissionStatus.denied,
            ),
          )
          as _i7.Future<_i22.PermissionStatus>);

  @override
  _i7.Future<_i22.PermissionStatus> requestBluetoothScan() =>
      (super.noSuchMethod(
            Invocation.method(#requestBluetoothScan, []),
            returnValue: _i7.Future<_i22.PermissionStatus>.value(
              _i22.PermissionStatus.denied,
            ),
          )
          as _i7.Future<_i22.PermissionStatus>);

  @override
  _i7.Future<_i22.PermissionStatus> requestBluetoothConnect() =>
      (super.noSuchMethod(
            Invocation.method(#requestBluetoothConnect, []),
            returnValue: _i7.Future<_i22.PermissionStatus>.value(
              _i22.PermissionStatus.denied,
            ),
          )
          as _i7.Future<_i22.PermissionStatus>);

  @override
  _i7.Future<_i22.PermissionStatus> requestLocation() =>
      (super.noSuchMethod(
            Invocation.method(#requestLocation, []),
            returnValue: _i7.Future<_i22.PermissionStatus>.value(
              _i22.PermissionStatus.denied,
            ),
          )
          as _i7.Future<_i22.PermissionStatus>);
}
